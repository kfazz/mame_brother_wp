# license:BSD-3-Clause
# copyright-holders:David Haywood
# xavix2000 opcodes (Super XaviX)

phy_imp
	read_pc_noinc();
	write(SP, Y);
	dec_SP();
	prefetch();

phx_imp
	read_pc_noinc();
	write(SP, X);
	dec_SP();
	prefetch();

plx_imp
	read_pc_noinc();
	read(SP);
	inc_SP();
	X = read(SP);
	set_nz(X);
	prefetch();

ply_imp
	read_pc_noinc();
	read(SP);
	inc_SP();
	Y = read(SP);
	set_nz(Y);
	prefetch();

clr_acc
	read_pc_noinc();
	A = 0;
	set_nz(A);
	prefetch();

dec_acc
	read_pc_noinc();
	A--;
	set_nz(A);
	prefetch();

not_acc
	read_pc_noinc();
	A = A ^ 0xff;
	set_nz(A);
	prefetch();

inc_acc
	read_pc_noinc();
	A++;
	set_nz(A);
	prefetch();

neg_acc
	read_pc_noinc();
	A = (0x00 - A) & 0xff;
	set_nz(A);
	prefetch();

oral0_acc
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

oral1_acc
	read_pc_noinc();
	A |= (m_l & 0x0000ff00) >> 8;
	set_nz(A);
	prefetch();

oral2_acc
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

oral3_acc
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

andl0_acc
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

andl1_acc
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

andl2_acc
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

andl3_acc
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

eorl0_acc
	read_pc_noinc();
	A ^= (m_l & 0x000000ff) >> 0;
	set_nz(A);
	prefetch();

eorl1_acc
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

eorl2_acc
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

eorl3_acc
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

adcl0_acc
	read_pc_noinc();
	do_adc((m_l & 0x000000ff) >> 0);
	prefetch();

adcl1_acc
	read_pc_noinc();
	do_adc((m_l & 0x0000ff00) >> 8);
	prefetch();

adcl2_acc
	read_pc_noinc();
	do_adc((m_l & 0x00ff0000) >> 16);
	prefetch();

adcl3_acc
	read_pc_noinc();
	do_adc((m_l & 0xff000000) >> 24);
	prefetch();

stal0_acc
	read_pc_noinc();
	m_l = (m_l & 0xffffff00) | (A & 0xff); // TODO: flags
	prefetch();

stal1_acc
	read_pc_noinc();
	m_l = (m_l & 0xffff00ff) | ((A & 0xff) << 8); // TODO: flags
	prefetch();

stal2_acc
	read_pc_noinc();
	m_l = (m_l & 0xff00ffff) | ((A & 0xff) << 16); // TODO: flags
	prefetch();

stal3_acc
	read_pc_noinc();
	m_l = (m_l & 0x00ffffff) | ((A & 0xff) << 24); // TODO: flags
	prefetch();

ldal0_acc
	read_pc_noinc();
	A = (m_l & 0x000000ff) >> 0; // TODO: flags
	prefetch();

ldal1_acc
	read_pc_noinc();
	A = (m_l & 0x0000ff00) >> 8; // TODO: flags
	prefetch();

ldal2_acc
	read_pc_noinc();
	A = (m_l & 0x00ff0000) >> 16; // TODO: flags
	prefetch();

ldal3_acc
	read_pc_noinc();
	A = (m_l & 0xff000000) >> 24; // TODO: flags
	prefetch();

cmpl0_acc
	read_pc_noinc();
	do_cmp(A, (m_l & 0x000000ff) >> 0);
	prefetch();

cmpl1_acc
	read_pc_noinc();
	do_cmp(A, (m_l & 0x0000ff00) >> 8);
	prefetch();

cmpl2_acc
	read_pc_noinc();
	do_cmp(A, (m_l & 0x00ff0000) >> 16);
	prefetch();

cmpl3_acc
	read_pc_noinc();
	do_cmp(A, (m_l & 0xff000000) >> 24);
	prefetch();

sbcl0_acc
	read_pc_noinc();
	do_sbc((m_l & 0x000000ff) >> 0);
	prefetch();

sbcl1_acc
	read_pc_noinc();
	do_sbc((m_l & 0x0000ff00) >> 8);
	prefetch();

sbcl2_acc
	read_pc_noinc();
	do_sbc((m_l & 0x00ff0000) >> 16);
	prefetch();

sbcl3_acc
	read_pc_noinc();
	do_sbc((m_l & 0xff000000) >> 24);
	prefetch();

spa0_acc
	read_pc_noinc();
	m_pa = (m_pa & 0xffff00) | A; // TODO: Flags?
	prefetch();

lpa0_acc
	read_pc_noinc();
	A = (m_pa & 0x0000ff) >> 0; // TODO: Flags?
	prefetch();

spa1_acc
	read_pc_noinc();
	m_pa = (m_pa & 0xff00ff) | (A << 8); // TODO: Flags?
	prefetch();

lpa1_acc
	read_pc_noinc();
	A = (m_pa & 0x00ff00) >> 8; // TODO: Flags?
	prefetch();

spa2_acc
	read_pc_noinc();
	m_pa = (m_pa & 0x00ffff) | (A << 16); // TODO: Flags?
	prefetch();

lpa2_acc
	read_pc_noinc();
	A = (m_pa & 0xff0000) >> 16; // TODO: Flags?
	prefetch();

spb0_acc
	read_pc_noinc();
	m_pb = (m_pb & 0xffff00) | A; // TODO: Flags?
	prefetch();

lpb0_acc
	read_pc_noinc();
	A = (m_pb & 0x0000ff) >> 0; // TODO: Flags?
	prefetch();

spb1_acc
	read_pc_noinc();
	m_pb = (m_pb & 0xff00ff) | (A << 8); // TODO: Flags?
	prefetch();

lpb1_acc
	read_pc_noinc();
	A = (m_pb & 0x00ff00) >> 8; // TODO: Flags?
	prefetch();

spb2_acc
	read_pc_noinc();
	m_pb = (m_pb & 0x00ffff) | (A << 16); // TODO: Flags?
	prefetch();

lpb2_acc
	read_pc_noinc();
	A = (m_pb & 0xff0000) >> 16; // TODO: Flags?
	prefetch();

incpa_imp
	read_pc_noinc();
	m_pa++;
	set_nz(m_pa&0xff); // startup code seems to require flag to set if low byte is 0x00?
	prefetch();

incpb_imp
	read_pc_noinc();
	m_pb++;
	set_nz(m_pb&0xff); // startup code seems to require flag to set if low byte is 0x00?
	prefetch();

decpa_imp
	read_pc_noinc();
	m_pa--;
	set_nz(m_pa&0xff); // startup code seems to require flag to set if low byte is 0x00?
	prefetch();

decpb_imp
	read_pc_noinc();
	m_pb--;
	set_nz(m_pb&0xff); // startup code seems to require flag to set if low byte is 0x00?
	prefetch();

orapa_imp
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

andpa_imp
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

eorpa_imp
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

adcpa_imp
	do_adc(read_full_data_sp(m_pa+Y));
	prefetch();

stapa_imp
	write_full_data_sp(m_pa+Y, A);
	prefetch();

ldapa_imp
	A = read_full_data_sp(m_pa+Y);
	prefetch();

cmppa_imp
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

sbcpa_imp
	do_sbc(read_full_data_sp(m_pa+Y));
	prefetch();

orapb_imp
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

andpb_imp
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

eorpb_imp
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

adcpb_imp
	do_adc(read_full_data_sp(m_pb+Y));
	prefetch();

stapb_imp
	write_full_data_sp(m_pb+Y, A);
	prefetch();

ldapb_imp
	A = read_full_data_sp(m_pb+Y);
	prefetch();

cmppb_imp
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

sbcpb_imp
	do_sbc(read_full_data_sp(m_pb+Y));
	prefetch();

stx_aby
	TMP = read_pc();
	TMP = set_h(TMP, read_pc());
	write(TMP+Y, X);
	prefetch();

sty_abx
	TMP = read_pc();
	TMP = set_h(TMP, read_pc());
	write(TMP+X, Y);
	prefetch();

stz_zpg
	TMP = read_pc();
	write(TMP, 0x00);
	prefetch();

stz_aba
	TMP = read_pc();
	TMP = set_h(TMP, read_pc());
	write(TMP, 0x00);
	prefetch();

bit_zpx
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

bit_abx
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

bit_imm
	TMP = read_pc();
	if(A & TMP)
		P &= ~F_Z;
	else
		P |= F_Z;
	prefetch();

asr_zpg
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

asr_aba
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

asr_zpx
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

asr_acc
	A = do_asr(A);
	prefetch();

asr_abx
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

cmc_imp
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

sev_imp
	read_pc_noinc();
	P |= F_V;
	prefetch();

callf_aba
	fatalerror("unhandled opcode %02x%04x: %02x\n", m_codebank, PPC, inst_state);
	read_pc_noinc();
	prefetch();

jmpf_ind
	TMP = read_pc();
	TMP = set_h(TMP, read_pc());
	PC = read(TMP);
	PC = set_h(PC, read(set_l(TMP, TMP+1)));
	TMP2 = read(TMP+2);
	set_codebank(TMP2);
	prefetch();
