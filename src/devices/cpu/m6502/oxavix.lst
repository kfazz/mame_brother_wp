# license:BSD-3-Clause
# copyright-holders:David Haywood
# xavix opcodes

callf_xa3
	read(SP);
	write(SP, get_codebank());
	dec_SP();
	TMP2 = read_pc();
	TMP = read_pc();
	//read(SP);
	write(SP, PC>>8);
	dec_SP();
	write(SP, PC);
	dec_SP();
	TMP = set_h(TMP, read_pc());
	PC = TMP;
	set_codebank(TMP2);
	prefetch();

retf_imp
	read_pc_noinc();
	read(SP);
	inc_SP();
	PC = read(SP);
	inc_SP();
	PC = set_h(PC, read(SP));
	inc_SP();
	TMP2 = read(SP);
	set_codebank(TMP2);
	read_pc();
	prefetch();

brk_xav_imp
	// there is code in soem games to indicate this doesn't always push the far bank to the stack..
	// The 6502 bug when a nmi occurs in a brk is reproduced (case !irq_taken && nmi_state)
	if(irq_taken) {
		read_pc_noinc();
	} else {
		read_pc();
	}
	write(SP, get_codebank());
	set_codebank(0x00); // epo_efdx, rad_ping and rad_mtrk strongly suggest that interrupts must force bank 0 as code jumps to a ROM pointer stored earlier / a fixed pointer to a rom address in bank 0
	dec_SP();
	write(SP, PC >> 8);
	dec_SP();
	write(SP, PC);
	dec_SP();
	write(SP, irq_taken ? P & ~F_B : P);
	dec_SP();
	if(nmi_state) {
		if (m_vector_callback.isnull())
		{
			PC = read_arg(0xfffa);
			PC = set_h(PC, read_arg(0xfffb));
		}
		else
		{
			if (m_vector_callback(0,1) != -1)
			{
				PC = m_vector_callback(0,1);
				PC = set_h(PC, m_vector_callback(0,0));
			}
			else
			{
				PC = read_arg(0xfffa);
				PC = set_h(PC, read_arg(0xfffb));
			}
		}

		nmi_state = false;
		standard_irq_callback(NMI_LINE);
	} else {
		if (m_vector_callback.isnull())
		{
			PC = read_arg(0xfffe);
			PC = set_h(PC, read_arg(0xffff));
		}
		else
		{
			if (m_vector_callback(1,1) != -1)
			{
				PC = m_vector_callback(1,1);
				PC = set_h(PC, m_vector_callback(1,0));
			}
			else
			{
				PC = read_arg(0xfffe);
				PC = set_h(PC, read_arg(0xffff));
			}
		}

		if(irq_taken)
			standard_irq_callback(IRQ_LINE);
	}
	irq_taken = false;
	P |= F_I; // Do *not* move after the prefetch
	prefetch();
	inst_state = -1;

rti_xav_imp
	read_pc_noinc();
	read(SP);
	inc_SP();
	P = read(SP) | (F_B|F_E);
	inc_SP();
	PC = read(SP);
	inc_SP();
	PC = set_h(PC, read(SP));
	inc_SP();
	TMP2 = read(SP);
	set_codebank(TMP2);
	prefetch();


xavlda_idy
	TMP2 = read_pc(); // we need to fetch the zero page part from zero page, but the rest as if zero page wasn't there, similar to the 6509
	TMP = read(TMP2);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	A = read_special(TMP+Y);
	set_nz(A);
	prefetch();
